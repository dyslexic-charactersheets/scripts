i18n.esLanguages = {
  "Italian": LanguageType.ITALIAN,
  // "Spanish": LanguageType.SPANISH,
  // "Polish": LanguageType.POLISH,
  "German": LanguageType.STANDARDGERMAN,
  "French": LanguageType.STANDARDFRENCH,
  "Portuguese": LanguageType.STANDARDPORTUGUESE,
  "Russian": LanguageType.RUSSIAN,
  // "Dutch": LanguageType.DUTCH,
  "US English": LanguageType.ENGLISH
};

i18n.patternise = function (text) {
    text = i18n.denormalise(text);
    text = text.replaceAll('/', '\/');
    return '/'+text+'/';
};

i18n.leadingWhitespace = function(text) {
  var text = String(text);
  var trimmed = text.ltrim();
  return text.substring(0, text.length - trimmed.length);
}

i18n.trailingWhitespace = function(text) {
  var text = String(text);
  var trimmed = text.rtrim();
  return text.substring(trimmed.length);
};

i18n.loadTranslations = function (messagesFile) {
	try {
		log("i18n: Reading messages file", messagesFile);
		var messages = i18n.loadCSV(messagesFile);
		log("i18n: Read "+messages.length+" messages");

	  var messages2 = [];
	  for (var i = 0; i < messages.length; i++) {
	    messages[i]['Original'] = i18n.normalise(messages[i]['Original']);
	    messages[i]['Translation'] = i18n.normalise(messages[i]['Translation']);
	    messages[i]['Part of'] = i18n.normalise(messages[i]['Part of']);
      if (messages[i]['Original'] == messages[i]['Part of'] || typeof messages[i]['Part of'] !== 'string') {
        messages[i]['Part of'] = '';
      }

      // special case: Russian is broken in the Merriweather font, so swap some characters to make it look close enough
      messages[i]['Translation'] = messages[i]['Translation'].replace(/Ы/g, 'ЬІ');

	    if (messages[i]['Translation'] && messages[i]['Translation'].length > 0 && messages[i]['Translation'] !== '-') {
	      messages2.push(messages[i]);
	      if (messages[i]['Original'] == 'd00' && messages[i]['Translation'])
	        i18n.d00 = messages[i]['Translation'];
	    }
	  }
		log("i18n: Kept "+messages2.length+" messages");
	  i18n.messages = messages2;
  } catch (e) {
    log("i18n: Error loading translations", messagesFile, { "Error": e.message } );
  }
};

i18n.enableFontSubstitutions = function() {
  i18n.substituteFonts = true;

  if (!i18n.hasOwnProperty("substitutions")) {
    log("Fonts will be substituted");
    i18n.substitutions = [];
    for (var i = 0; i < textFonts.length; i++) {
      var font = textFonts[i];
      // log("Text font:", font.family, font.style);
      for (var j = 0; j < i18n.fontSubstitutions.length; j++) {
        var substitution = i18n.fontSubstitutions[j];
        if (substitution['To family'] == font.family && substitution['To style'] == font.style) {
          substitution.textFont = font;
          i18n.substitutions.push(substitution);
        }
      }
    }
    log("Found substitutions", i18n.substitutions.length);
  }
}

i18n.translate = function(message, partof) {
	try {
	  var message = i18n.normalise(message);
	  var partof = i18n.normalise(partof);
    if (partof == message || typeof partof !== 'string') {
      partof = '';
    }
	  var d00 = false;
	  for (var i = 0; i < i18n.messages.length; i++) {
	    if (i18n.messages[i]['Original'] == message && i18n.messages[i]['Part of'] == partof) {
	      var translation = i18n.denormalise(i18n.messages[i]['Translation']);
	      if (translation.length > 0)
	        return translation;
	    }
	  }

	  // translate dice
	  if (i18n.d00) {
      var diceRe = /d([0-9]+)/;
      if (found = message.match(diceRe)) {
        log("Found a die:", found[1]);
        var number = parseInt(found[1]);
        if (!isNaN(number)) {
          var translatedDie = i18n.d00.replace('/00$/', number);
          var translation = message.replaceAll(found, translatedDie);
          log("i18n: Replacing dice", found[0], translation);
          if (translation != message)
            return translation;
        }
      } else if (message == "d") {
        var translation = i18n.d00.replace(/00$/, '');
        return translation;
      }
	  }
  } catch (e) {
    log("i18n: Error translating", message, { "Error": e.message } );
  }
  return false;
}



i18n.applyTranslationsFolder = function (srcFolder, dstFolder) {
	try {
		var files = srcFolder.getAllFiles();
		log("i18n: Translating "+i18n.messages.length+" strings in "+files.length+" files.");

		for ( var i = 0; i < files.length; i++ ) {
		  var srcFile = files[i];
      var dstFile = new File(dstFolder.fullName+srcFile.fullName.substring(srcFolder.fullName.length));
		  i18n.applyTranslationsFile(srcFile, dstFile)
		}
  } catch (e) {
    log("i18n: Error in folder", srcFolder, { "Error": e.message } );
  }
};

i18n.applyTranslationsFile = function (srcFile, dstFile) {
  try {
    log("i18n: Translating file", srcFile, dstFile);
    dstFile.ensureParentFolder();

    // i18n.tickThreshold = 30;
    var doc = app.open(srcFile);
    var baseURI = new Folder(baseFolder).absoluteURI+"/";
    var filePath = srcFile.absoluteURI.replace(baseURI, "");

    var countTranslatedFrames = 0;
    var frames = doc.textFrames;
    for ( var j = 0; j < frames.length; j++ ) {
      var frame = frames[j];
      /*
      if (i18n.substituteFonts) {
        var ranges = frames[j].textRanges;
        for ( var k = 0; k < ranges.length; k++ ) {
          var range = ranges[k];
          for (var f = 0; f < substitutions.length; f++) {
            // log("Comparing font:", range.characterAttributes.textFont.family, range.characterAttributes.textFont.style, "==", substitutions[f]['Family'], substitutions[f]['Style']);
            if (range.characterAttributes.textFont.family == substitutions[f]['Family'] 
              && range.characterAttributes.textFont.style == substitutions[f]['Style']) {
              // log("Substituting font:", substitutions[f]['Family'], substitutions[f]['Style']);
              range.characterAttributes.textFont = substitutions[f].textFont;
              if (substitutions[f]['To scale'])
                range.characterAttributes.size = range.characterAttributes.size * substitutions[f]['To scale'];
              if (substitutions[f]['To tracking'])
                range.characterAttributes.tracking = substitutions[f]['To tracking'];
              if (substitutions[f]['To width'])
                range.characterAttributes.horizontalScale = substitutions[f]['To width'];
              affected = true;
            }
          }
        }
      }
      */

      if (i18n.translateFrame(frame, filePath))
        countTranslatedFrames++;
    }

    if (i18n.substituteFonts || countTranslatedFrames > 0) {
      doc.saveAs(dstFile);
      i18n.countTranslatedFiles++;
    }
    doc.close();
    i18n.tick();
  } catch (e) {
    log("i18n: Error in file", srcFile, { "Error": e.message } );
  }
};

i18n.translateFrame = function (frame, filePath) {
  // split range based on continuous font, size and colour
  // always keep the splitting rules in sync with the other script!
  var spans = i18n.splitFrameIntoSpans(frame, filePath);
  // log('Found spans', spans.length);

  // find translations if possible
  var hasTranslation = false;
  for (var i = 0; i < spans.length; i++) {
    var span = spans[i];
    var translation = i18n.translate(span.str, span.partOf);
    if (translation) {
      // log('Found part translation', span.str, translation);
      hasTranslation = true;
      spans[i].translation = translation;
      if (translation != span.str) {
        spans[i].font = spans[i].translatedFont;
      }
    } else {
      // log('No translation', span.str);
      spans[i].translation = "";
    }
    spans[i].leadingWhitespace = i18n.leadingWhitespace(span.str);
    spans[i].trailingWhitespace = i18n.trailingWhitespace(span.str);
  }
  if (!hasTranslation) {
    return; // bail early
  }

  // apply translation replacement, enforcing style
  var fulltext = '';
  for (var i = 0; i < spans.length; i++) {
    var span = spans[i];
    span.text = span.leadingWhitespace + span.translation + span.trailingWhitespace;
    fulltext += span.text;
  }
  log('Setting frame text', fulltext);
  frame.contents = fulltext;

  // reapply character attributes
  var c = 0;
  var spanNum = 0;
  var local = 0;
  for (var i = 0; i < frame.textRanges.length; i++) {
    if (local >= spans[spanNum].text.length) {
      spanNum++;
      local = 0;
    }
    if (spanNum >= spans.length) {
      break; // run out of spans
    }
    
    var span = spans[spanNum];
    var font = span.font;
    // var font = span.translation ? span.translatedFont : span.font;
    log('Style range', frame.textRanges[i].contents, spanNum, font.f);

    frame.textRanges[i].characterAttributes.fillColor = span.fillColor;
    frame.textRanges[i].characterAttributes.textFont = font.textFont;
    frame.textRanges[i].characterAttributes.size = font.size;

    // next
    local += frame.textRanges[i].contents.length;
  }

  return true;
};

i18n.splitFrameIntoSpans = function (frame, filePath) {
  var fullstr = frame.contents;
  var ranges = frame.textRanges;
  var spans = [];

  var str = '';
  var spanranges = [];
  var prev = false;

  var accumulate = function (replacement, characterAttributes) {
    var font = {
      textFont: characterAttributes.textFont,
      size: characterAttributes.size,
      tracking: 25,
      horizontalScale: 100,
      f: characterAttributes.textFont.family
    };

    var translatedFont = font;
    
    // log("Substituting font for span", str, "->", replacement[0]);
    if (i18n.substituteFonts) {
      for (var f = 0; f < i18n.substitutions.length; f++) {
        var sub = i18n.substitutions[f];
        log("Comparing font", font.textFont.family, font.textFont.style, "==", sub['Family'], sub['Style']);
        if (font.textFont.family == sub['Family'] 
          && font.textFont.style == sub['Style']) {
          log("Substituting font", sub['Family'], sub['Style'], "->", sub['To family'], sub['To style']);
          translatedFont = {
            textFont: sub.textFont,
            size: font.size * (sub['To scale'] ? sub['To scale'] : 1),
            tracking: sub['To tracking'] ? sub['To tracking'] : 25,
            horizontalScale: sub['To width'] ? sub['To width'] : 100,
            f: sub['To family']
          };
          affected = true;
        }
      }
    }

    spans.push({
      str: replacement[0], partOf: replacement[1], 
      // ranges: spanranges,
      fillColor: characterAttributes.fillColor,
      font: font,
      translatedFont: translatedFont
    });
  }

  for ( var k = 0; k < ranges.length; k++ ) {
    var range = ranges[k];
    if (prev == false || 
      (  isEqual(range.characterAttributes.fillColor, prev.characterAttributes.fillColor)
      && isEqual(range.characterAttributes.textFont, prev.characterAttributes.textFont)
      && isEqual(range.characterAttributes.size, prev.characterAttributes.size)
      )) {
      str = str+String(range.contents);
      spanranges.push(range);
    } else {
      var replacement = i18n.getTranslationReplacement(str, fullstr, filePath);
      accumulate(replacement, prev.characterAttributes);

      str = String(range.contents);
      spanranges = [ range ];
    }
    prev = range;
  }

  if (str !== '') {
    var replacement = i18n.getTranslationReplacement(str, fullstr, filePath);
    accumulate(replacement, prev.characterAttributes);
  }
  return spans;
}